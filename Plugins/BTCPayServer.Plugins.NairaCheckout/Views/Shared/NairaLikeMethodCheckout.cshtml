@using BTCPayServer.Abstractions.Services
@using BTCPayServer.Plugins.NairaCheckout.PaymentHandlers
@using BTCPayServer.Plugins.NairaCheckout.Services
@using System.Globalization
@inject Safe safe
@inject MavapayApiClientService mavapayClient;
@inject NairaCheckoutDbContextFactory dbContextFactory;
@model BTCPayServer.Models.InvoicingModels.CheckoutModel
@{
    string errorMessage = string.Empty;
    string accountName = string.Empty;
    string bankName = string.Empty;
    string accountNumber = string.Empty;
    decimal amount = 0;
    DateTimeOffset? expiryDate = null;

    var lightningDetails = await mavapayClient.GetLightningPaymentLink(Model.InvoiceId);
    if (string.IsNullOrEmpty(lightningDetails.lnInvoice) || lightningDetails.amount == 0)
    {
        errorMessage = "Cannot retrieve a lightning invoice at the moment. Please contact the merchant";
    }
    await using var ctx = dbContextFactory.CreateContext();
    var mavapaySetting = ctx.MavapaySettings.FirstOrDefault(c => c.StoreId == Model.StoreId);
    var apiKey = mavapaySetting?.ApiKey;
    if (string.IsNullOrEmpty(errorMessage))
    {
        var createQuoteResponse = await mavapayClient.NairaCheckout(apiKey, lightningDetails.amount, lightningDetails.lnInvoice, Model.InvoiceId, Model.StoreId);
        if (!string.IsNullOrEmpty(createQuoteResponse.ErrorMessage))
        {
            errorMessage = createQuoteResponse.ErrorMessage;
        }
        amount = createQuoteResponse.Amount;
        bankName = createQuoteResponse.BankName;
        accountName = createQuoteResponse.AccountName;
        accountNumber = createQuoteResponse.AccountNumber;
        expiryDate = createQuoteResponse.AccountNumberExpiration;
    }
}

<template id="@NairaCheckoutModelExtension.CheckoutBodyComponentName">
    <div class="text-center mt-4">
        <template v-if="!errorMessage">
            <h5 class="fw-bold text-primary mb-3">Pay with Bank Transfer</h5>
            <p class="mb-4 text-muted">
                To complete your payment, kindly make a transfer to the following bank account:
            </p>

            <div v-if="!expired" class="card border-0 shadow-sm p-4 bg-light mx-auto" style="max-width: 400px;">
                <p class="mb-2">
                    <strong class="text-dark">Bank Name:</strong><br>
                    <span class="fs-5 text-secondary">{{ bankName }}</span>
                </p>
                <p class="mb-2">
                    <strong class="text-dark">Account Name:</strong><br>
                    <span class="fs-5 text-secondary">{{ accountName }}</span>
                </p>
                <p class="mb-2">
                    <strong class="text-dark">Account Number:</strong><br>
                    <span class="fs-5 text-secondary">{{ accountNumber }}</span>
                </p>
                <p class="mb-2">
                    <strong class="text-dark">Amount:</strong><br>
                    <span class="fs-5 text-secondary">{{ amount }}</span>
                </p>
                <p class="mb-0 text-danger fw-bold" v-if="timeLeft">
                    Expires in: {{ timeLeft }}
                </p>
            </div>

            <div v-else class="alert alert-warning fw-bold mt-3" role="alert">
                The account number provided has expired. Kindly create a new invoice to continue your payment
            </div>
        </template>

        <template v-else>
            <div class="alert alert-danger fw-bold" role="alert">
                {{ errorMessage }}
            </div>
        </template>
    </div>
</template>

<script>
    Vue.component(@safe.Json(NairaCheckoutModelExtension.CheckoutBodyComponentName), {
        props: ['model', 'nfcSupported', 'nfcScanning', 'nfcErrorMessage', 'nfcWarningMessage'],
        template: @safe.Json("#" + NairaCheckoutModelExtension.CheckoutBodyComponentName),
        components: {
            qrcode: VueQrcode
        },
        data() {
            // currentTab is needed for backwards-compatibility with old plugin versions
            return {
                currentTab: undefined,
                bankName: @safe.Json(bankName),
                accountName: @safe.Json(accountName),
                accountNumber: @safe.Json(accountNumber),
                errorMessage: @safe.Json(errorMessage),
                amount: @safe.Json(amount),
                expiryDate: @safe.Json(expiryDate),
                timeLeft: null,
                expired: false
            };
        },
        mounted() {
            if (this.expiryDate) {
                this.startCountdown();
            }
        },
        methods: {
            startCountdown() {
                const expiry = new Date(this.expiryDate).getTime();
                const interval = setInterval(() => {
                    const now = new Date().getTime();
                    const distance = expiry - now;

                    if (distance <= 0) {
                        clearInterval(interval);
                        this.timeLeft = "Expired";
                        this.expired = true;
                    } else {
                        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        const seconds = Math.floor((distance % (1000 * 60)) / 1000);
                        this.timeLeft = `${minutes}m ${seconds}s`;
                    }
                }, 1000);
            }
        }
    });
</script>