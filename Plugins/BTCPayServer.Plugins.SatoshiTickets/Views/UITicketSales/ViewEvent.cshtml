@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Abstractions.Extensions
@using System.Globalization
@using BTCPayServer.Plugins.SatoshiTickets.Data
@using BTCPayServer.Plugins.SatoshiTickets.ViewModels
@inject IFileService FileService
@inject IScopeProvider ScopeProvider
@model UpdateSimpleTicketSalesEventViewModel
@{
    ViewData.SetActivePage(PluginNavPages.Index, "Event");
    var canUpload = await FileService.IsAvailable();
    var storeId = ScopeProvider.GetCurrentStoreId();
    bool isEditMode = !string.IsNullOrEmpty(Model.EventId);
    string formAction = isEditMode
        ? Url.Action("UpdateEvent", "UITicketSales", new { eventId = Model.EventId, storeId })
        : Url.Action("CreateEvent", "UITicketSales", new { storeId });
}

<div class="sticky-header">
    <h2 text-translate="true">@ViewData["Title"]</h2>
    <div class="d-flex gap-3 mt-3 mt-sm-0">
        @if (!string.IsNullOrEmpty(Model.EventId))
        {
            <a asp-controller="UITicketType" asp-action="List" asp-route-storeId="@storeId" asp-route-eventId="@Model.EventId" class="btn btn-secondary" role="button">Ticket Tiers</a>
        }
        <button type="submit" form="event-form" class="btn btn-success">@(isEditMode ? "Update Event" : "Create Event")</button>
    </div>
</div>

@section PageHeadContent
{
    <style>
        .autocomplete-popup {
            position: absolute;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            max-height: 200px;
            overflow-y: auto;
            display: none;
            z-index: 1000;
        }

        .autocomplete-item {
            padding: 8px 12px;
            cursor: pointer;
        }

            .autocomplete-item:hover {
                background-color: #f0f0f0;
            }

        .variable-highlight {
            background-color: #e8f0fe;
            border-radius: 3px;
            padding: 2px 0;
        }
    </style>
}

<partial name="_StatusMessage" />

<form id="event-form" action="@formAction" method="post" enctype="multipart/form-data">
    <div class="row">
        <div class="col-sm-10 col-md-9 col-xl-7 col-xxl-6">
            <div class="form-group">
                <label asp-for="Title" class="form-label" data-required></label>
                <input asp-for="Title" class="form-control" required />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Location" class="form-label" data-required></label>
                <input asp-for="Location" class="form-control" required />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="RedirectUrl" class="form-label"></label>
                <input asp-for="RedirectUrl" class="form-control" />
                <span asp-validation-for="RedirectUrl" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="EventType" class="form-label" data-required></label>
                <select asp-for="EventType" asp-items="Model.EventTypes" class="form-control" required></select>
                <span asp-validation-for="EventType" class="text-danger"></span>
            </div>

            <div class="form-group">
                <div class="d-flex align-items-center justify-content-between gap-2">
                    <label asp-for="EventImageFile" class="form-label"></label>
                    @if (!string.IsNullOrEmpty(Model.EventImageUrl))
                    {
                        <button type="submit" class="btn btn-link p-0 text-danger" name="RemoveEventLogoFile" value="true">
                            <vc:icon symbol="cross" /> Remove
                        </button>
                    }
                </div>
                @if (canUpload)
                {
                    <div class="d-flex align-items-center gap-3">
                        <input asp-for="EventImageFile" type="file" class="form-control flex-grow" />
                        @if (!string.IsNullOrEmpty(Model.EventImageUrl))
                        {
                            <img src="@Model.EventImageUrl" alt="Logo" style="height:2.1rem;max-width:10.5rem;" />
                        }
                    </div>
                    <span asp-validation-for="EventImageFile" class="text-danger"></span>
                }
                else
                {
                    <input asp-for="EventImageFile" type="file" class="form-control" disabled />
                    <div class="form-text">In order to upload an image, a <a asp-controller="UIServer" asp-action="Files">file storage</a> must be configured.</div>
                }
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-sm-6">
            <div class="form-group">
                <label asp-for="Description" class="form-label" data-required></label>
                <textarea asp-for="Description" rows="5" class="form-control richtext" required></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-10 col-xxl-constrain">
            <div class="d-flex flex-wrap gap-3 mb-3">
                <div class="form-group w-250px mb-0">
                    <label asp-for="StartDate" class="form-label" data-required></label>
                    <div class="input-group flex-nowrap">
                        <input type="datetime-local" asp-for="StartDate" value="@(Model.StartDate.ToString("u", CultureInfo.InvariantCulture))" class="form-control flatdtpicker" placeholder="No Event date has been set" required />
                        <button class="btn btn-secondary input-group-clear px-3" type="button" title="Clear">
                            <vc:icon symbol="close" />
                        </button>
                    </div>
                    <span asp-validation-for="StartDate" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="EndDate" class="form-label"></label>
                    <div class="input-group flex-nowrap">
                        <input type="datetime-local" asp-for="EndDate" value="@(Model.EndDate?.ToString("u", CultureInfo.InvariantCulture))" class="form-control flatdtpicker" placeholder="No Event date has been set" />
                        <button class="btn btn-secondary input-group-clear px-3" type="button" title="Clear">
                            <vc:icon symbol="close" />
                        </button>
                    </div>
                    <span asp-validation-for="EndDate" class="text-danger"></span>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-10 col-xxl-constrain">
            <div class="d-flex flex-wrap gap-3 mb-3">
                <div class="form-group">
                    <label asp-for="Currency" class="form-label"></label>
                    <input asp-for="Currency" class="form-control w-auto" currency-selection />
                    <div class="form-text">Defaults to (@Model.StoreDefaultCurrency) if empty.</div>
                    <span asp-validation-for="Currency" class="text-danger"></span>
                </div>
            </div>
        </div>
    </div>

    <div class="row align-items-center mb-4">
        <div class="col-md-12 d-flex flex-column">
            <div class="form-group d-flex align-items-center">
                <input asp-for="HasMaximumCapacity" type="checkbox" class="btcpay-toggle me-2" id="maxCapacityToggle" />
                <label asp-for="HasMaximumCapacity" class="form-check-label"></label>
            </div>
            <div id="maxCapacityInput" class="mt-2" style="display: none;">
                <label asp-for="MaximumEventCapacity" class="form-label"></label>
                <input asp-for="MaximumEventCapacity" type="number" class="form-control w-25" placeholder="Enter maximum capacity" />
                <span asp-validation-for="MaximumEventCapacity" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-sm-6">
            <div class="form-group">
                <label asp-for="EmailSubject" class="form-label" data-required></label>
                <input asp-for="EmailSubject" type="text" class="form-control" required />
                <span asp-validation-for="EmailSubject" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-sm-6">
            <div class="form-group">
                <label asp-for="EmailBody" class="form-label" data-required></label>
                <textarea asp-for="EmailBody" rows="10" class="form-control" id="EmailBody" required></textarea>
                <div id="autocompletePopup" class="dropdown-menu" style="display: none; position: absolute; width: auto; max-height: 200px; overflow-y: auto;"></div>
                <div class="form-text">Type '{{' to view dynamic email template variables</div>
                <span asp-validation-for="EmailBody" class="text-danger"></span>
            </div>
        </div>
    </div>
</form>

@section PageFootContent {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const toggle = document.getElementById("maxCapacityToggle");
            const inputDiv = document.getElementById("maxCapacityInput");
            function updateVisibility() {
                inputDiv.style.display = toggle.checked ? "block" : "none";
            }
            updateVisibility();
            toggle.addEventListener("change", updateVisibility);


            const variables = [
                'Name',
                'Email',
                'Title',
                'Location',
                'Description',
                'EventDate',
                'Currency'
            ];
            const textarea = document.getElementById('EmailBody');
            const popup = document.getElementById('autocompletePopup');
            textarea.parentElement.style.position = 'relative';
            let cursorPosition = 0;

            textarea.addEventListener('input', function(e) {
                const text = textarea.value;
                cursorPosition = textarea.selectionStart;

                if (text.slice(cursorPosition - 2, cursorPosition) === '{{') {
                    showAutocomplete(cursorPosition);
                } else {
                    popup.style.display = 'none';
                }
            });

            function showAutocomplete(position) {
                const text = textarea.value.substring(0, position);
                const lines = text.split('\n');
                const currentLineNumber = lines.length - 1;

                const lineHeight = parseInt(window.getComputedStyle(textarea).lineHeight) || 20;

                popup.innerHTML = '';

                variables.forEach(variable => {
                    const item = document.createElement('button');
                    item.type = 'button';
                    item.className = 'dropdown-item';
                    item.textContent = variable;
                    item.style.display = 'block';
                    item.style.width = '100%';
                    item.style.textAlign = 'left';
                    item.style.padding = '0.25rem 1rem';

                    item.addEventListener('click', function() {
                        insertVariable(variable);
                    });

                    popup.appendChild(item);
                });

                popup.style.position = 'absolute';
                popup.style.left = '50px'; 
                popup.style.top = `${(currentLineNumber * lineHeight) + 30}px`;
                popup.style.minWidth = '150px';
                popup.style.maxWidth = '200px';
                popup.style.zIndex = '1050';
                popup.style.display = 'block';
                popup.style.backgroundColor = '#fff';
                popup.style.border = '1px solid rgba(0,0,0,.15)';
                popup.style.borderRadius = '0.25rem';
                popup.style.padding = '0.5rem 0';
            }


            function insertVariable(variable) {
                const text = textarea.value;
                const beforeText = text.slice(0, cursorPosition);
                const afterText = text.slice(cursorPosition);

                textarea.value = beforeText + variable + '}}' + afterText;

                const newPosition = cursorPosition + variable.length + 2;
                textarea.setSelectionRange(newPosition, newPosition);
                textarea.focus();

                popup.style.display = 'none';
            }

            document.addEventListener('click', function(e) {
                if (!popup.contains(e.target) && e.target !== textarea) {
                    popup.style.display = 'none';
                }
            });
        });
    </script>
}

