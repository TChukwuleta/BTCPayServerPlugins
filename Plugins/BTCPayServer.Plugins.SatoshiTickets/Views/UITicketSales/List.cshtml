@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Plugins.SatoshiTickets.Data
@using BTCPayServer.Plugins.SatoshiTickets.ViewModels
@using BTCPayServer.Abstractions.Extensions
@inject IScopeProvider ScopeProvider
@model SalesTicketsEventsViewModel
@{
    Layout = "_Layout";
    ViewData.SetActivePage(PluginNavPages.Index, "Satoshi Tickets Events");
    var storeEmailSettingsConfigured = (bool)ViewData["StoreEmailSettingsConfigured"];
    var storeId = ScopeProvider.GetCurrentStoreId();
}


<div class="sticky-header">
    <h2 text-translate="true">@ViewData["Title"]</h2>
    <div class="d-flex gap-3 mt-3 mt-sm-0">
        <a id="create-event" asp-action="ViewEvent" asp-route-storeId="@storeId"
           class="btn btn-success @(storeEmailSettingsConfigured ? "" : "disabled")" role="button">
            Create Event
        </a>
    </div>
</div>
<partial name="_StatusMessage" />


<nav id="SectionNav" class="mb-3">
    <div class="nav">
        <a id="all-view"
           asp-action="List"
           asp-route-storeId="@storeId"
           class="nav-link @(!Model.Expired ? "active" : "")"
           role="tab">All</a>

        <a id="expired-view"
           asp-action="List"
           asp-route-storeId="@storeId"
           asp-route-expired="true"
           class="nav-link @(Model.Expired ? "active" : "")"
           role="tab">Expired Events</a>
    </div>
</nav>


@if (Model.DisplayedEvents != null && Model.DisplayedEvents.Any())
{
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Event Date</th>
                    <th>Ticket Purchase Link</th>
                    <th>Tickets Sold</th>
                    <th class="actions-col"></th>
                    <th class="actions-col"></th>
                    <th class="w-75px"></th>
                </tr>
            </thead>
            <tbody id="UsersList">
                @foreach (var ticketEvent in Model.DisplayedEvents)
                {
                    <tr id="user_@ticketEvent.Id" class="user-overview-row mass-action-row">
                        <td>
                            <div class="d-inline-flex align-items-center gap-3">
                                <a asp-action="ViewEvent" asp-route-storeId="@storeId" asp-route-eventId="@ticketEvent.Id">@ticketEvent.Title</a>
                            </div>
                        </td>
                        <td>@ticketEvent.EventDate.ToString("M/d/yy, hh:mm tt")</td>
                        <td>
                            <a href="@ticketEvent.EventPurchaseLink" target="_blank">Event Link</a>
                            <button class="copy-button btn p-0" onclick="copyToClipboard(this, '@ticketEvent.EventPurchaseLink')" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                                </svg>
                            </button>
                        </td>
                        <td>@ticketEvent.TicketSold</td>
                        <td class="actions-col">
                            <div class="d-inline-flex align-items-center gap-3">
                                <a asp-action="List" asp-controller="UITicketType" asp-route-storeId="@storeId" asp-route-eventId="@ticketEvent.Id">Ticket Tiers</a>
                            </div>
                        </td>
                        <td class="actions-col">
                            @if (ticketEvent.EventDate > DateTime.UtcNow)
                            {
                                <div class="d-inline-flex align-items-center gap-3">
                                    <a class="dropdown-item text-success"
                                       asp-action="ToggleTicketEventStatus"
                                       asp-route-storeId="@storeId"
                                       asp-route-eventId="@ticketEvent.Id"
                                       asp-route-enable="@(ticketEvent.EventState == EntityState.Disabled)">
                                        @(ticketEvent.EventState == EntityState.Disabled ? "Activate" : "Disable")
                                    </a>
                                </div>
                            }
                        </td>
                        <td class="text-end">
                            <div class="d-inline-flex align-items-center gap-3">
                                @if (ticketEvent.TicketSold > 0)
                                {
                                    <a asp-action="ViewEventTicket" asp-route-storeId="@storeId" asp-route-eventId="@ticketEvent.Id">View</a>
                                }
                                @if (ticketEvent.TicketSold <= 0 || ticketEvent.EventDate <= DateTime.UtcNow)
                                {
                                    <a asp-action="DeleteEvent" asp-route-storeId="@storeId" asp-route-eventId="@ticketEvent.Id" class="text-danger">Delete</a>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p class="text-secondary mt-4">No events record found</p>
}

@section PageFootContent {
    <script>
            function copyToClipboard(button, text) {
                navigator.clipboard.writeText(text).then(() => {
                    let tooltip = bootstrap.Tooltip.getInstance(button);
                    if (tooltip) {
                        tooltip.hide();
                        tooltip.show();
                    }

                    button.innerHTML = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="20 6 9 17 4 12"></polyline>
                    </svg>`;

                    setTimeout(() => {
                        if (tooltip) tooltip.hide();
                        button.innerHTML = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                        </svg>`;
                    }, 500);
                });
            }

            document.addEventListener("DOMContentLoaded", function () {
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                    new bootstrap.Tooltip(tooltipTriggerEl);
                });
            });
    </script>
}
