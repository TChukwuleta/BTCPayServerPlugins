// <auto-generated />
using System;
using BTCPayServer.Plugins.SimpleTicketSales;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BTCPayServer.Plugins.SimpleTicketSales.Data.Migrations
{
    [DbContext(typeof(SimpleTicketSalesDbContext))]
    partial class SimpleTicketSalesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BTCPayServer.Plugins.SimpleTicketSale")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BTCPayServer.Plugins.SimpleTicketSales.Data.Event", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmailBody")
                        .HasColumnType("text");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventLogo")
                        .HasColumnType("text");

                    b.Property<int>("EventState")
                        .HasColumnType("integer");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool>("HasMaximumCapacity")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int?>("MaximumEventCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoreId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events", "BTCPayServer.Plugins.SimpleTicketSale");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.SimpleTicketSales.Data.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoreId")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("TxnId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders", "BTCPayServer.Plugins.SimpleTicketSale");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.SimpleTicketSales.Data.Ticket", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("QRCodeData")
                        .HasColumnType("text");

                    b.Property<string>("StoreId")
                        .HasColumnType("text");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("text");

                    b.Property<string>("TicketTypeId")
                        .HasColumnType("text");

                    b.Property<string>("TicketTypeName")
                        .HasColumnType("text");

                    b.Property<string>("TxnNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Tickets", "BTCPayServer.Plugins.SimpleTicketSale");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.SimpleTicketSales.Data.TicketType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("integer");

                    b.Property<int>("TicketTypeState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes", "BTCPayServer.Plugins.SimpleTicketSale");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.SimpleTicketSales.Data.Ticket", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.SimpleTicketSales.Data.Order", null)
                        .WithMany("Tickets")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.SimpleTicketSales.Data.Order", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
